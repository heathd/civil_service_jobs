# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sqlite_magic` gem.
# Please instead update this file by running `bin/tapioca gem sqlite_magic`.


# source://sqlite_magic//lib/sqlite_magic/version.rb#1
module SqliteMagic
  extend ::SqliteMagic
end

# source://sqlite_magic//lib/sqlite_magic.rb#12
class SqliteMagic::Connection
  # @return [Connection] a new instance of Connection
  #
  # source://sqlite_magic//lib/sqlite_magic.rb#14
  def initialize(db_loc = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://sqlite_magic//lib/sqlite_magic.rb#20
  def add_columns(tbl_name, col_names); end

  # source://sqlite_magic//lib/sqlite_magic.rb#28
  def close; end

  # source://sqlite_magic//lib/sqlite_magic.rb#32
  def commit; end

  # source://sqlite_magic//lib/sqlite_magic.rb#36
  def create_table(tbl_name, col_names, unique_keys = T.unsafe(nil)); end

  # Returns the value of attribute database.
  #
  # source://sqlite_magic//lib/sqlite_magic.rb#13
  def database; end

  # source://sqlite_magic//lib/sqlite_magic.rb#48
  def execute(query, data = T.unsafe(nil)); end

  # This is an (expensive) convenience method to insert a row (for given unique keys), or if the row already exists
  #
  # source://sqlite_magic//lib/sqlite_magic.rb#64
  def insert_or_update(uniq_keys, values_hash, tbl_name = T.unsafe(nil), opts = T.unsafe(nil)); end

  # #save data into the database
  #
  # source://sqlite_magic//lib/sqlite_magic.rb#91
  def save_data(uniq_keys, values_array, tbl_name); end

  # Convenience method that returns true if VERBOSE environmental variable set (at the moment whatever it is set to)
  #
  # @return [Boolean]
  #
  # source://sqlite_magic//lib/sqlite_magic.rb#120
  def verbose?; end
end

# source://sqlite_magic//lib/sqlite_magic.rb#9
class SqliteMagic::DatabaseError < ::SqliteMagic::Error; end

# source://sqlite_magic//lib/sqlite_magic.rb#8
class SqliteMagic::Error < ::StandardError; end

# source://sqlite_magic//lib/sqlite_magic.rb#10
class SqliteMagic::NoSuchTable < ::SqliteMagic::Error; end

# source://sqlite_magic//lib/sqlite_magic/version.rb#2
SqliteMagic::VERSION = T.let(T.unsafe(nil), String)
