# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-progressbar` gem.
# Please instead update this file by running `bin/tapioca gem tty-progressbar`.


# source://tty-progressbar//lib/tty/progressbar/timer.rb#3
module TTY; end

# Used for creating terminal progress bar
#
# @api public
#
# source://tty-progressbar//lib/tty/progressbar/timer.rb#4
class TTY::ProgressBar
  include ::MonitorMixin
  extend ::Forwardable

  # Create progress bar
  #
  # @api public
  # @example
  #   bar = TTY::Progressbar.new
  #   bar.configure do |config|
  #   config.total = 20
  #   end
  # @option options
  # @option option
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param format [String] the tokenized string that displays the output
  # @param options [Hash]
  # @param option [Hash] a customizable set of options
  # @return [ProgressBar] a new instance of ProgressBar
  # @yield [@configuration]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#106
  def initialize(format, options = T.unsafe(nil)); end

  # Advance the progress bar
  #
  # @api public
  # @param progress [Object|Number]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#205
  def advance(progress = T.unsafe(nil), tokens = T.unsafe(nil)); end

  # Attach this bar to multi bar
  #
  # @api private
  # @param multibar [TTY::ProgressBar::Multi] the multibar under which this bar is registered
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#170
  def attach_to(multibar); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def bar_format(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def clear(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def clear_head(*args, **_arg1, &block); end

  # Clear current line
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#484
  def clear_line; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def complete(*args, **_arg1, &block); end

  # Check if progress is finished
  #
  # @api public
  # @return [Boolean] true when progress finished, false otherwise
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#494
  def complete?; end

  # Access instance configuration
  #
  # @api public
  # @yield [@configuration]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#151
  def configure; end

  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#33
  def current; end

  # Advance the progress bar to the updated value
  #
  # @api public
  # @param value [Number] the desired value to updated to
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#292
  def current=(value); end

  # Check if progress is finished, stopped or paused
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#521
  def done?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def elapsed_time(*args, **_arg1, &block); end

  # End the progress
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#419
  def finish; end

  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#31
  def format; end

  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#31
  def format=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def frequency(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def head(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def hide_cursor(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def incomplete(*args, **_arg1, &block); end

  # Check if progress can be determined or not
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#160
  def indeterminate?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def inset(*args, **_arg1, &block); end

  # Inspect bar properties
  #
  # @api public
  # @return [String]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#572
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def interval(*args, **_arg1, &block); end

  # Iterate over collection either yielding computation to block
  # or provided Enumerator. If the bar's `total` was not set,
  # it would be taken from `collection.count`, otherwise previously
  # set `total` would be used. This allows using the progressbar
  # with infinite, lazy, or slowly-calculated enumerators.
  #
  # @api public
  # @example
  #   bar.iterate(30.times) { ... }
  # @note If `total` is set, iteration will NOT stop after this number of
  #   iterations, only when provided Enumerable is finished. It may
  #   be convenient in "unsure number of iterations" situations
  #   (like downloading in chunks, when server may eventually send
  #   more chunks than predicted), but be careful to not pass infinite
  #   enumerators without previously doing `.take(some_finite_number)`
  #   on them.
  # @param collection [Enumerable] the collection to iterate over
  # @param progress [Integer] the amount to move progress bar by
  # @return [Enumerator]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#259
  def iterate(collection, progress = T.unsafe(nil), &block); end

  # Log message above the current progress bar
  #
  # @api public
  # @param message [String] the message to log out
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#546
  def log(message); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def mean_rate(*args, **_arg1, &block); end

  # Move cursor to a row of the current bar if the bar is rendered
  # under a multibar. Otherwise, do not move and yield on current row.
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#362
  def move_to_row; end

  # Register callback with this bar
  #
  # @api public
  # @param name [Symbol] the name for the event to listen for, e.i. :complete
  # @return [self]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#533
  def on(name, &callback); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def output(*args, **_arg1, &block); end

  # Pause the progress at the current position
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#473
  def pause; end

  # Check if progress is paused
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#512
  def paused?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def rate(*args, **_arg1, &block); end

  # Ratio of completed over total steps
  #
  # When the total is unknown the progress ratio oscillates
  # by going up from 0 to 1 and then down from 1 to 0 and
  # up again to infinity.
  #
  # @api public
  # @return [Float]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#318
  def ratio; end

  # Advance the progress bar to an exact ratio.
  # The target value is set to the closest available value.
  #
  # @api public
  # @param value [Float] the ratio between 0 and 1 inclusive
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#304
  def ratio=(value); end

  # Render progress to the output
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#332
  def render; end

  # Reset progress to default configuration
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#132
  def reset; end

  # Resize progress bar with new configuration
  #
  # @api public
  # @param new_width [Integer] the new width for the bar display
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#405
  def resize(new_width = T.unsafe(nil)); end

  # Resume rendering when bar is done, stopped or paused
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#441
  def resume; end

  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#35
  def row; end

  # Start progression by drawing bar and setting time
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#191
  def start; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def start_time(*args, **_arg1, &block); end

  # Stop and cancel the progress at the current position
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#452
  def stop; end

  # Check if progress is stopped
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#503
  def stopped?; end

  # Show bar format
  #
  # @api public
  # @return [String]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#563
  def to_s; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def total(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def unknown(*args, **_arg1, &block); end

  # Update configuration options for this bar
  #
  # @api public
  # @param options [Hash[Symbol]] the configuration options to update
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#276
  def update(options = T.unsafe(nil)); end

  # Use custom token formatter
  #
  # @api public
  # @param formatter_class [Object] the formatter class to add to formatting pipeline
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#180
  def use(formatter_class); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def width(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def width=(*args, **_arg1, &block); end

  # Write out to the output
  #
  # @api private
  # @param data [String]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#388
  def write(data, clear_first = T.unsafe(nil)); end

  private

  # Emit callback by name
  #
  # @api private
  # @param the [Symbol] event name
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#606
  def emit(name, *args); end

  # Pad message out with spaces
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#590
  def padout(message); end

  # Check if IO is attached to a terminal
  #
  # return [Boolean]
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar.rb#617
  def tty?; end

  class << self
    # Determine the monospace display width of a string
    #
    # @api public
    # @param value [String] the value to determine width of
    # @return [Integer]
    #
    # source://tty-progressbar//lib/tty/progressbar.rb#62
    def display_columns(value); end

    # Determine terminal width
    #
    # @api public
    # @return [Integer]
    #
    # source://tty-progressbar//lib/tty/progressbar.rb#50
    def max_columns; end
  end
end

# Used by {Pipeline} to format bar
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/bar.rb#10
class TTY::ProgressBar::BarFormatter
  # Format :bar token
  #
  # @api public
  # @param value [String] the value being formatted
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/bar.rb#19
  def call(value); end

  private

  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/bar.rb#65
  def format_determinate(value, width); end

  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/bar.rb#40
  def format_indeterminate(value, width); end
end

# Used by {Pipeline} to format :byte and :current_byte tokens
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/current_byte.rb#11
class TTY::ProgressBar::ByteFormatter
  # Format :current_byte token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/current_byte.rb#20
  def call(value); end
end

# Used by {Pipeline} to format :byte_rate token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/byte_rate.rb#11
class TTY::ProgressBar::ByteRateFormatter
  # Format :byte_rate token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/byte_rate.rb#20
  def call(value); end
end

# @api public
#
# source://tty-progressbar//lib/tty/progressbar.rb#29
TTY::ProgressBar::CURSOR_LOCK = T.let(T.unsafe(nil), Monitor)

# source://tty-progressbar//lib/tty/progressbar/configuration.rb#7
class TTY::ProgressBar::Configuration
  include ::TTY::ProgressBar::Formats

  # @return [Configuration] a new instance of Configuration
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#66
  def initialize(options); end

  # The preconfigured bar format name, defaults to :classic
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#40
  def bar_format; end

  # The preconfigured bar format name, defaults to :classic
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#40
  def bar_format=(_arg0); end

  # Whether or not to clear the progress line, defaults to false
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#60
  def clear; end

  # Whether or not to clear the progress line, defaults to false
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#60
  def clear=(_arg0); end

  # Whether or not to replace head character with complete, defaults to false
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#64
  def clear_head; end

  # Whether or not to replace head character with complete, defaults to false
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#64
  def clear_head=(_arg0); end

  # The complete character in progress animation
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#20
  def complete; end

  # Set complete character(s)
  #
  # @api public
  # @param value [String]
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#88
  def complete=(value); end

  # The frequency with which to display a progress bar per second
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#48
  def frequency; end

  # The frequency with which to display a progress bar per second
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#48
  def frequency=(_arg0); end

  # The head character, defaults to complete
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#28
  def head; end

  # The head character, defaults to complete
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#28
  def head=(_arg0); end

  # Whether or not to hide the cursor, defaults to false
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#56
  def hide_cursor; end

  # Whether or not to hide the cursor, defaults to false
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#56
  def hide_cursor=(_arg0); end

  # The incomplete character in progress animation
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#24
  def incomplete; end

  # Set incomplete character(s)
  #
  # @api public
  # @param value [String]
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#99
  def incomplete=(value); end

  # The amount of indentation before a progress animation
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#36
  def inset; end

  # The amount of indentation before a progress animation
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#36
  def inset=(_arg0); end

  # The time interval for sampling of speed measurement, defaults to 1 second
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#52
  def interval; end

  # The time interval for sampling of speed measurement, defaults to 1 second
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#52
  def interval=(_arg0); end

  # The object that responds to print call, defaults to stderr
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#44
  def output; end

  # The object that responds to print call, defaults to stderr
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#44
  def output=(_arg0); end

  # The total number of steps to completion
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#12
  def total; end

  # Set total and adjust width if unset
  #
  # @api public
  # @param value [Integer, nil]
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#121
  def total=(value); end

  # The unknown character for indeterminate progress animation
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#32
  def unknown; end

  # Set unknown character(s)
  #
  # @api public
  # @param value [String]
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#110
  def unknown=(value); end

  # The maximum width for the progress bar except all formatting tokens
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#16
  def width; end

  # The maximum width for the progress bar except all formatting tokens
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#16
  def width=(_arg0); end

  private

  # Find bar char by type name and property
  #
  # @api private
  # @param name [Symbol]
  # @param property [Symbol]
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#134
  def fetch_char(name, property); end

  # Check whether a parameter's value is empty or not
  #
  # @api private
  # @raise [ArgumentError]
  #
  # source://tty-progressbar//lib/tty/progressbar/configuration.rb#149
  def raise_if_empty(name, value); end
end

# Responsible for converting values to different formats
#
# @api public
#
# source://tty-progressbar//lib/tty/progressbar/converter.rb#8
module TTY::ProgressBar::Converter
  private

  # Convert value to bytes
  #
  # @api public
  # @param value [Numeric] the value to convert to bytes
  # @param decimals [Integer] the number of decimals parts
  # @param separator [String] the separator to use for thousands in a number
  # @param unit_separator [String] the separtor to use between number and unit
  # @return [String]
  #
  # source://tty-progressbar//lib/tty/progressbar/converter.rb#68
  def to_bytes(value, decimals: T.unsafe(nil), separator: T.unsafe(nil), unit_separator: T.unsafe(nil)); end

  # Convert seconds to set precision
  #
  # @api public
  # @param seconds [Numeric] the seconds to convert
  # @return [String] the formatted result
  #
  # source://tty-progressbar//lib/tty/progressbar/converter.rb#46
  def to_seconds(seconds, precision: T.unsafe(nil)); end

  # Convert seconds to time notation
  #
  # @api public
  # @param seconds [Numeric] the seconds to convert to time
  #
  # source://tty-progressbar//lib/tty/progressbar/converter.rb#17
  def to_time(seconds); end

  class << self
    # Convert value to bytes
    #
    # @api public
    # @param value [Numeric] the value to convert to bytes
    # @param decimals [Integer] the number of decimals parts
    # @param separator [String] the separator to use for thousands in a number
    # @param unit_separator [String] the separtor to use between number and unit
    # @return [String]
    #
    # source://tty-progressbar//lib/tty/progressbar/converter.rb#68
    def to_bytes(value, decimals: T.unsafe(nil), separator: T.unsafe(nil), unit_separator: T.unsafe(nil)); end

    # Convert seconds to set precision
    #
    # @api public
    # @param seconds [Numeric] the seconds to convert
    # @return [String] the formatted result
    #
    # source://tty-progressbar//lib/tty/progressbar/converter.rb#46
    def to_seconds(seconds, precision: T.unsafe(nil)); end

    # Convert seconds to time notation
    #
    # @api public
    # @param seconds [Numeric] the seconds to convert to time
    #
    # source://tty-progressbar//lib/tty/progressbar/converter.rb#17
    def to_time(seconds); end
  end
end

# @api public
#
# source://tty-progressbar//lib/tty/progressbar/converter.rb#52
TTY::ProgressBar::Converter::BYTE_UNITS = T.let(T.unsafe(nil), Array)

# @api public
#
# source://tty-progressbar//lib/tty/progressbar/converter.rb#9
TTY::ProgressBar::Converter::HOURSECONDS = T.let(T.unsafe(nil), Integer)

# Used by {Pipeline} to format :current token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/current.rb#8
class TTY::ProgressBar::CurrentFormatter
  # Format :current token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/current.rb#17
  def call(value); end
end

# @api public
#
# source://tty-progressbar//lib/tty/progressbar.rb#25
TTY::ProgressBar::ECMA_CSI = T.let(T.unsafe(nil), String)

# Used by {Pipeline} to format :elapsed token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/elapsed.rb#11
class TTY::ProgressBar::ElapsedFormatter
  # Format :elapsed token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/elapsed.rb#20
  def call(value); end
end

# Used by {Pipeline} to format :eta token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/estimated.rb#11
class TTY::ProgressBar::EstimatedFormatter
  # Format :eta token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/estimated.rb#20
  def call(value); end
end

# Used by {Pipeline} to format :eta_time token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/estimated_time.rb#8
class TTY::ProgressBar::EstimatedTimeFormatter
  # Format :eta_time token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/estimated_time.rb#17
  def call(value); end
end

# source://tty-progressbar//lib/tty/progressbar/formats.rb#5
module TTY::ProgressBar::Formats; end

# source://tty-progressbar//lib/tty/progressbar/formats.rb#6
TTY::ProgressBar::Formats::FORMATS = T.let(T.unsafe(nil), Hash)

# source://tty-progressbar//lib/tty/progressbar/formatter.rb#5
class TTY::ProgressBar::Formatter < ::Module
  # Initialize this module with token matching pattern
  #
  # @api public
  # @param token_match [Regexp] the token matching pattern
  # @return [Formatter] a new instance of Formatter
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter.rb#19
  def initialize(token_match); end

  class << self
    # A helper for declaring a matching token pattern
    #
    # @api public
    #
    # source://tty-progressbar//lib/tty/progressbar/formatter.rb#9
    def [](token_match); end
  end
end

# source://tty-progressbar//lib/tty/progressbar/formatters.rb#23
class TTY::ProgressBar::Formatters
  extend ::Forwardable

  # @api private
  # @return [Formatters] a new instance of Formatters
  #
  # source://tty-progressbar//lib/tty/progressbar/formatters.rb#29
  def initialize(pipeline = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def decorate(*args, **_arg1, &block); end

  # Prepare default pipeline formatters
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/formatters.rb#36
  def load(progress); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def use(*args, **_arg1, &block); end
end

# Used by {Pipeline} to format :mean_byte token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/mean_byte.rb#11
class TTY::ProgressBar::MeanByteFormatter
  # Format :mean_byte token
  #
  # @api public
  # @param value [String] the value being formatted
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/mean_byte.rb#20
  def call(value); end
end

# Used by {Pipeline} to format :mean_rate token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/mean_rate.rb#11
class TTY::ProgressBar::MeanRateFormatter
  # Format :mean_rate token
  #
  # @api public
  # @param value [String] the value being formatted
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/mean_rate.rb#20
  def call(value); end
end

# Used by {ProgressBar} to measure progress rate per interval
# by default 1s
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/meter.rb#9
class TTY::ProgressBar::Meter
  # Create Meter
  #
  # @api private
  # @param interval [Integer] the interval for measurement samples
  # @return [Meter] a new instance of Meter
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#16
  def initialize(interval); end

  # The mean rate of all the sampled rates
  #
  # @api public
  # @return [Number] the mean rate
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#98
  def avg_rate; end

  # Reset the meter by clearing out it's metrics
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#111
  def clear; end

  # The mean rate of all the sampled rates
  #
  # @api public
  # @return [Number] the mean rate
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#98
  def mean_rate; end

  # Remove samples that are obsolete
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#51
  def prune_samples(at); end

  # The current rate of sampling for a given interval
  #
  # @api public
  # @return [Number] the current rate in decimal or 0 if cannot be determined
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#75
  def rate; end

  # Group all rates per interval
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#88
  def rates; end

  # Update meter with value
  #
  # @api public
  # @param at [Time] the time of the sampling
  # @param value [Integer] the current value of progress
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#41
  def sample(at, value); end

  # If we crossed a period boundary since @start_time,
  # save the rate for {#rates}
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#62
  def save_rate(at); end

  # Start sampling timer
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/meter.rb#24
  def start; end
end

# Used for managing multiple terminal progress bars
#
# @api public
#
# source://tty-progressbar//lib/tty/progressbar/multi.rb#13
class TTY::ProgressBar::Multi
  include ::Enumerable
  include ::MonitorMixin
  extend ::Forwardable

  # Create a multibar
  #
  # @api public
  # @example
  #   bars = TTY::ProgressBar::Multi.new
  # @example
  #   bars = TTY::ProgressBar::Multi.new("main [:bar]")
  # @param format [String] the formatting string to display this bar
  # @param options [Hash]
  # @return [Multi] a new instance of Multi
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#46
  def initialize(*args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # Check if all progress bars are complete
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#165
  def complete?; end

  # Calculate total current progress of all bars
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#154
  def current; end

  # Check if all bars are stopped or finished
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#187
  def done?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # Finish all progress bars
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#214
  def finish; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # Find the number of characters to move into the line
  # before printing the bar
  #
  # @api public
  # @param bar [TTY::ProgressBar] the progress bar for which line inset is calculated
  # @return [String] the inset
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#242
  def line_inset(bar); end

  # Increase row count
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#94
  def next_row; end

  # Observe a bar for emitted events
  #
  # @api private
  # @param bar [TTY::ProgressBar] the bar to observe for events
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#106
  def observe(bar); end

  # Listen on event
  #
  # @api public
  # @param name [Symbol] the event name to listen on
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#261
  def on(name, &callback); end

  # Pause all progress bars
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#221
  def pause; end

  # Check if all bars are paused
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#198
  def paused?; end

  # Handle the progress event
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#116
  def progress_handler; end

  # Register a new progress bar
  #
  # @api public
  # @param format [String] the formatting string to display the bar
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#73
  def register(format, options = T.unsafe(nil)); end

  # Resume all progress bars
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#228
  def resume; end

  # Number of currently occupied rows in terminal display
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#30
  def rows; end

  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#132
  def start; end

  # Stop all progress bars
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#207
  def stop; end

  # Check if all of the registered progress bars is stopped
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#176
  def stopped?; end

  # Get the top level bar if it exists
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#126
  def top_bar; end

  # Calculate total maximum progress of all bars
  #
  # @api public
  # @return [Integer]
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#143
  def total; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def width(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def width=(*args, **_arg1, &block); end

  private

  # Fire an event by name
  #
  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/multi.rb#276
  def emit(name, *args); end
end

# @api public
#
# source://tty-progressbar//lib/tty/progressbar/multi.rb#23
TTY::ProgressBar::Multi::DEFAULT_INSET = T.let(T.unsafe(nil), Hash)

# @api public
#
# source://tty-progressbar//lib/tty/progressbar.rb#27
TTY::ProgressBar::NEWLINE = T.let(T.unsafe(nil), String)

# Used by {Pipeline} to format :percent token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/percent.rb#10
class TTY::ProgressBar::PercentFormatter
  # Format :percent token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/percent.rb#19
  def call(value); end
end

# Used by {ProgressBar} to decorate format string
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/pipeline.rb#8
class TTY::ProgressBar::Pipeline
  include ::Enumerable

  # Create formatting pipeline
  #
  # @api private
  # @return [Pipeline] a new instance of Pipeline
  #
  # source://tty-progressbar//lib/tty/progressbar/pipeline.rb#14
  def initialize(formatters = T.unsafe(nil)); end

  # Decorate the tokenized string with actual values
  #
  # @api private
  # @example
  #   decorate("[:bar] :current :elapsed")
  # @param tokenized [String] the string with tokens
  # @return [nil]
  #
  # source://tty-progressbar//lib/tty/progressbar/pipeline.rb#40
  def decorate(tokenized); end

  # Iterate over formatters
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/pipeline.rb#54
  def each(&block); end

  # Add a new formatter
  #
  # @api public
  # @example
  #   use(TTY::ProgressBar::TotalFormatter.new(progress_bar))
  #
  # source://tty-progressbar//lib/tty/progressbar/pipeline.rb#25
  def use(formatter); end

  protected

  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/pipeline.rb#60
  def formatters; end
end

# Used by {Pipeline} to format :rate token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/rate.rb#11
class TTY::ProgressBar::RateFormatter
  # Format :rate token
  #
  # @api public
  # @param value [String] the value being formatted
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/rate.rb#20
  def call(value); end
end

# Used to measure the elapsed time for multiple time intervals
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/timer.rb#8
class TTY::ProgressBar::Timer
  # Create Timer
  #
  # @api private
  # @return [Timer] a new instance of Timer
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#14
  def initialize; end

  # Total elapsed time
  #
  # @api public
  # @return [Float] the elapsed time in seconds
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#42
  def elapsed_time; end

  # Measure current time interval
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#53
  def elapsed_until_now; end

  # Reset the start time to nil and elapsed time to zero
  #
  # @api public
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#21
  def reset; end

  # Check whether or not the timer is running
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#32
  def running?; end

  # Start measuring elapsed time for a new interval
  #
  # @api public
  # @return [Time] return the start time
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#65
  def start; end

  # @api private
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#9
  def start_time; end

  # Stop measuring elapsed time for the current interval
  #
  # @api public
  # @return [Float] return elapsed time for the stopped interval
  #
  # source://tty-progressbar//lib/tty/progressbar/timer.rb#78
  def stop; end
end

# Used by {Pipeline} to format :total_byte token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/total_byte.rb#11
class TTY::ProgressBar::TotalByteFormatter
  # Format :total_byte token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/total_byte.rb#20
  def call(value); end
end

# Used by {Pipeline} to format :total token
#
# @api private
#
# source://tty-progressbar//lib/tty/progressbar/formatter/total.rb#10
class TTY::ProgressBar::TotalFormatter
  # Format :total token
  #
  # @api public
  # @param value [String] the value to format
  #
  # source://tty-progressbar//lib/tty/progressbar/formatter/total.rb#19
  def call(value); end
end

# source://tty-progressbar//lib/tty/progressbar/version.rb#5
TTY::ProgressBar::VERSION = T.let(T.unsafe(nil), String)
