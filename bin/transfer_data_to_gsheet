#!/usr/bin/env ruby

#typed: true

$LOAD_PATH << File.dirname(__FILE__) + "/../config/"
require 'init'

require 'logger'
require 'googleauth'
require 'google/apis/sheets_v4'
require 'google/apis/drive_v3'
require 'date'
require 'time'
require 'tzinfo'
require "reverse_markdown"

class BatchSheet < T::Struct
  const :id, String
  const :name, String
  prop :rows, Integer
end

class GoogleSheet
  attr_reader :authorizer, :folder_id, :logger, :rows

  def initialize(folder_id:, logger: Logger.new(nil))
    authorize!
    @folder_id = folder_id
    @logger = logger
    @rows = []
    @batch_sheets = nil
  end

  def authorize!
    raise_if_invalid_creds!

    opts = {
      scope: [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
      ]
    }

    if ENV.has_key?("GOOGLE_CLOUD_CREDS")
      opts.merge!(json_key_io: StringIO.new(ENV.fetch("GOOGLE_CLOUD_CREDS")))
    end

    @authorizer = Google::Auth::ServiceAccountCredentials.make_creds(opts)
  end

  def raise_if_invalid_creds!
    unless valid_creds?
      raise "Must pass credentials in ENV, either:
        - GOOGLE_CLOUD_CREDS containing the full JSON credentials structure downloaded from google cloud
        - or GOOGLE_CLIENT_ID GOOGLE_CLIENT_EMAIL GOOGLE_PRIVATE_KEY containing these credentials"
    end
  end

  def valid_creds?
    ENV.has_key?("GOOGLE_CLOUD_CREDS") or
      %W{GOOGLE_CLIENT_ID GOOGLE_CLIENT_EMAIL GOOGLE_PRIVATE_KEY}.all? {|env_var| ENV.has_key?(env_var) }
  end

  def sheets_service
    @sheets_service ||= begin
      service = Google::Apis::SheetsV4::SheetsService.new
      service.authorization = authorizer
      service
    end
  end

  def drive_service
    @drive_service ||= begin
      service = Google::Apis::DriveV3::DriveService.new
      service.authorization = authorizer
      service
    end
  end

  def header_row
    [
			"Scrape Date",
			"Scrape TZ",
			"Refcode",
			"Job title",
			"Department",
			"Location",
			"Salary",
			"Closing date",
			"Grade",
			"Stage",
			"Reference Number",
			"Job Grade",
			"Number Of Jobs Available",
			"Job Grade 0",
			"Job Grade 1",
			"Contract Type",
			"Business Area",
			"Type Of Role",
			"Working Pattern",
			"Length Of Employment",
			"Body"
		]
  end

  def flush!
    n = next_batch_sheet

    logger.info "Appending #{rows.size} rows to refcode sheet"
    flush_data_to_sheet(refcode_spreadsheet_id, 'Sheet1!A1', rows.map {|row| row[0..7] + [n.name]})
    logger.info "Successfully appended #{rows.size} rows"

    logger.info "Appending #{rows.size} rows to '#{n.name}' (id='#{n.id}')"
    flush_data_to_sheet(n.id, 'Sheet1!A1', rows, add_header_row: n.rows == 0)
    logger.info "Successfully appended #{rows.size} rows to '#{n.name}' (id='#{n.id}')"
    n.rows += rows.size
    @rows = []
  end

  def flush_data_to_sheet(spreadsheet_id, table_range, rows, add_header_row: false)
    value_range_object = Google::Apis::SheetsV4::ValueRange.new(
      range: table_range,
      major_dimension: 'ROWS',
      values: add_header_row ? [header_row] + rows : rows
    )

    response = T.let(nil, T.nilable(Google::Apis::SheetsV4::AppendValuesResponse))

    with_retries do
      response = sheets_service.append_spreadsheet_value(
        spreadsheet_id,
        table_range,
        value_range_object,
        value_input_option: 'RAW'
      )
      response
    end
  end

  def with_retries(&block)
    tries = 0

    catch :success do
      begin
        tries += 1
        throw :success, block.call
      rescue Google::Apis::RateLimitError => e
        if tries < 20
          sleep_time = tries^2 / 2
          logger.info "Request was rate limited, sleeping for #{sleep_time} before attempt number #{tries}"
          sleep(sleep_time)
        else
          raise
        end
      end
    end
  end

  def set_row_height(spreadsheet_id, pixel_height = 21, sheet_id = "Sheet1")
    # Create the request to update row height
    requests = [
      {
        update_dimension_properties: {
          range: {
            sheet_id: sheet_id,
            dimension: 'ROWS',
            start_index: 1
            # end_index: 2000 -- unbounded if unspecified?
          },
          properties: {
            pixel_size: pixel_height
          },
          fields: 'pixelSize'
        }
      }
    ]

    # Create the batch update request
    batch_update_request = Google::Apis::SheetsV4::BatchUpdateSpreadsheetRequest.new(
      requests: requests
    )

    with_retries { sheets_service.batch_update_spreadsheet(spreadsheet_id, batch_update_request) }
  end

  def approx_batch_size_in_bytes
    rows.map do |row|
      row.map {|v| v.to_s.size}.sum
    end.sum
  end

  def append_row(row)
    rows << row
    if (approx_batch_size_in_bytes > 1_500_000)
      flush!
    end
  end

  def refcode_spreadsheet_id
    @refcode_spreadsheet_id ||= begin
      found = find_sheets_by_name(folder_id, "Refcodes")
      if found.any?
        found.first
      else
        create_spreadsheet("Refcodes")
      end
    end
  end

  def batch_sheets
    @batch_sheets ||= begin
      found = find_sheets_containing_word_in_name(folder_id, "Batch")
      found.inject({}) do |memo, file|
        memo.merge(
          file.name => BatchSheet.new(id: file.id, rows: count_refcodes_in_sheet(file.id), name: file.name)
        )
      end
    end
  end

  def max_rows_per_batch_sheet
    2000
  end

  def next_batch_sheet
    found = batch_sheets.find do |name, batch_sheet|
      batch_sheet.rows < max_rows_per_batch_sheet
    end

    if found
      found.last
    else
      name = "Batch #{batch_sheets.size + 1}"
      created = BatchSheet.new(id: create_spreadsheet(name), rows: 0, name: name)
      @batch_sheets[name] = created
      created
    end
  end

  def count_refcodes_in_sheet(sheet_id)
    response = with_retries { sheets_service.get_spreadsheet_values(sheet_id, 'Sheet1!C:C') }
    if response.values
      response.values[1..-1].reject(&:empty?).size
    else
      0
    end
  end

  def refcodes_of_jobs_already_in_sheet
    @refcodes_of_jobs_already_in_sheet ||= begin
      response = with_retries { sheets_service.get_spreadsheet_values(refcode_spreadsheet_id, 'Sheet1!C:C') }
      if response.values
        response.values[1..-1].reject(&:empty?).map {|row| row.first}
      else
        []
      end
    end
  end

  sig {params(name: String).returns(String)}
  def create_spreadsheet(name)
    created_spreadsheet = sheets_service.create_spreadsheet(
      Google::Apis::SheetsV4::Spreadsheet.new(
        properties: {
          title: name
        }
      )
    )

    r = drive_service.update_file(
      created_spreadsheet.spreadsheet_id,
      add_parents: folder_id,
      fields: 'id, parents'
    )
    r.id
  end

  sig {params(folder_id: String, sheet_name: String).returns(T::Array[String])}
  def find_sheets_by_name(folder_id, sheet_name)
    response = with_retries { drive_service.list_files(
      q: "'#{folder_id}' in parents and name = '#{sheet_name}' and mimeType = 'application/vnd.google-apps.spreadsheet'",
      fields: 'files(id, name)'
    ) }
    response.files.map(&:id)
  end

  sig {params(folder_id: String, word: String).returns(T::Array[Google::Apis::DriveV3::File])}
  def find_sheets_containing_word_in_name(folder_id, word)
    response = with_retries { drive_service.list_files(
      q: "'#{folder_id}' in parents and name contains '#{word}' and mimeType = 'application/vnd.google-apps.spreadsheet'",
      fields: 'files(id, name)'
    ) }
    response.files
  end
end

extend T::Sig

sig{params(datetime: TZInfo::DateTimeWithOffset).returns(Numeric)}
def generate_google_datetime(datetime)
	#	The integer part represents the number of days since December 30, 1899. For example, 1 represents December 31, 1899, 2 represents January 1, 1900, and so on.
	#	The fractional part represents the fraction of the day. For example, 0.5 represents 12:00 PM (noon), 0.75 represents 6:00 PM, and so on.
  reference_date = Date.new(1899,12,30)
  integer_part = datetime.to_date - reference_date

  fractional_part = datetime.hour/24r + datetime.minute/(24*60r) + datetime.second/(24*60*60r)

  (integer_part + fractional_part).to_f
end

sig {params(html: T.nilable(String)).returns(String)}
def html_to_markdown(html)
  ReverseMarkdown.convert(html || "")
end

def closedate(job_closing_statement)
  tz = TZInfo::Timezone.get("Europe/London")

  if job_closing_statement =~ /Closes : (.*?) on (.*?)$/
    time = Time.parse($1) rescue Time.new(23,55,00)
    date = Date.parse($2)

    generate_google_datetime(tz.local_datetime(date.year,date.month,date.day,time.hour,time.min,time.sec))
  else
    job_closing_statement
  end

rescue
	job_closing_statement
end

sig {params(
  job: CivilServiceJobsScraper::DynamoDbResultStore::JobMainRecord,
  body: T.nilable(CivilServiceJobsScraper::DynamoDbResultStore::JobBodyRecord)
  ).returns(T::Array[String])}
def spreadsheet_row_for_job(job, body)
  tz = TZInfo::Timezone.get("Europe/London")

  [
    generate_google_datetime(tz.to_local(job.created_at)),
    tz.to_local(job.created_at).strftime('%Z'),
    job.refcode,
    job.title,
    job.department,
    job.location,
    job.salary,
    closedate(job.closingdate),
    job.grade,
    job.stage,
    job.reference_number,
    job.job_grade,
    job.number_of_jobs_available,
    job.job_grade_0,
    job.job_grade_1,
    job.contract_type,
    job.business_area,
    job.type_of_role,
    job.working_pattern,
    job.length_of_employment,
    html_to_markdown(body && body.body)
  ]
end

LOGGER = Logger.new($stdout)
$stdout.sync = true
sheet = GoogleSheet.new(folder_id: '1mZO5hWUZFNTgnkb7tvDrvG3x2mVOxCeU',
                        logger: LOGGER)

store = CivilServiceJobsScraper::DynamoDbResultStore.new
store.each.with_index do |job, i|
	if sheet.refcodes_of_jobs_already_in_sheet.include?(job.refcode)
		LOGGER.info "#{i}: #{job.refcode} #{job.title} -- already in sheet"
	else
		LOGGER.info "#{i}: #{job.refcode} #{job.title} (#{job.created_at}) - loading"
		row = spreadsheet_row_for_job(job, job.body_record)
		sheet.append_row(row)
	end
end
sheet.flush!
